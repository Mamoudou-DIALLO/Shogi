/*piece joueur 0*/
partie_t *nouv;
piece_t piece = piece_creer(0,'D',1);
modifier_case(nouv,piece,9,3);
coup_t * extraire_coup_fin(liste_t * l)
{
  if(liste_vide(l)==1)
  {
    return NULL;
  }
  else
  {
    coup_t *fin=l->dernier;
    l->dernier=fin->precedent;
    l->dernier->suivant=NULL;
    fin->precedent=NULL;
    l->taille--;
  }
  return fin;
}
void debut_partie(partie_t * p){
 int i,j;

	for(i=0;i<11;i++)
		for(j=0;j<11;j++)
                    p->tablier->plateau[i][j]='.';


	  p->tablier->plateau[1][1]='L';
  	p->tablier->plateau[1][2]='N';
  	p->tablier->plateau[1][3]='S';
  	p->tablier->plateau[1][4]='G';
  	p->tablier->plateau[1][5]='K';
  	p->tablier->plateau[1][6]='G';
  	p->tablier->plateau[1][7]='S';
  	p->tablier->plateau[1][8]='N';
  	p->tablier->plateau[1][9]='L';
	  p->tablier->plateau[2][2]='R';
  	p->tablier->plateau[8][8]='B';
  	p->tablier->plateau[3][1]='P';
	  p->tablier->plateau[3][2]='P';
  	p->tablier->plateau[3][3]='P';
	  p->tablier->plateau[3][4]='P';
  	p->tablier->plateau[3][5]='P';
  	p->tablier->plateau[3][6]='P';
  	p->tablier->plateau[3][7]='P';
  	p->tablier->plateau[3][8]='P';
  	p->tablier->plateau[3][9]='P';
	  p->tablier->plateau[9][1]='l';
  	p->tablier->plateau[9][2]='n';
  	p->tablier->plateau[9][3]='s';
  	p->tablier->plateau[9][4]='g';
  	p->tablier->plateau[9][5]='k';
  	p->tablier->plateau[9][6]='g';
  	p->tablier->plateau[9][7]='s';
  	p->tablier->plateau[9][8]='n';
  	p->tablier->plateau[9][9]='l';
	  p->tablier->plateau[8][8]='r';
  	p->tablier->plateau[8][2]='b';
  	p->tablier->plateau[7][1]='P';
	  p->tablier->plateau[7][2]='P';
  	p->tablier->plateau[7][3]='P';
  	p->tablier->plateau[7][4]='P';
  	p->tablier->plateau[7][5]='P';
  	p->tablier->plateau[7][6]='P';
  	p->tablier->plateau[7][7]='P';
  	p->tablier->plateau[7][8]='P';
  	p->tablier->plateau[7][9]='P';

	for (i=0;i < 11;i++){
		for (j=0;j<11;j++)
    {
      printf("   %d",p->tablier->plateau[i][j]);
    }
		printf("\n");
	}
}
